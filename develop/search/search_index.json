{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The reactpy-utils project is a collection of utilities and components that target the more obscure aspects of website design with RectPy. </p> <p>The following list gives a flavour of the type features that are available:</p> <ul> <li>Copy to clipboard</li> <li>Dynamic Context Models</li> <li>Minified JavaScript templates</li> <li>Read/write the Browser local storage </li> <li>Set the document title</li> </ul>"},{"location":"#install-from-pypi","title":"Install from PyPI","text":"<p>Run the following command to install reactpy-utils in your Python environment.</p> <pre><code>pip install reactpy-utils\n</code></pre>"},{"location":"about/changelog/","title":"Changelog","text":"<p>    The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.    </p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/contributing/","title":"Contributor Guide","text":""},{"location":"about/contributing/#creating-a-development-environment","title":"Creating a development environment","text":"<p>If you plan to make code changes to this repository, you will need to install the following dependencies first:</p> <ul> <li>Git</li> <li>Python 3.9+</li> <li>Hatch</li> </ul> <p>Once you finish installing these dependencies, you can clone this repository:</p> <pre><code>git clone https://github.com/stevej2608/reactpy-utils.git\ncd reactpy-utils\n</code></pre>"},{"location":"about/contributing/#executing-test-environment-commands","title":"Executing test environment commands","text":"<p>By utilizing <code>hatch</code>, the following commands are available to manage the development environment.</p>"},{"location":"about/contributing/#tests","title":"Tests","text":"Command Description <code>hatch test</code> Run Python tests using the current environment's Python version <code>hatch test --all</code> Run tests using all compatible Python versions <code>hatch test --python 3.9</code> Run tests using a specific Python version <code>hatch test -k test_script_minified</code> Run only a specific test What other arguments are available to me? <p>The <code>hatch test</code> command is a wrapper for <code>pytest</code>. Hatch \"intercepts\" a handful of arguments, which can be previewed by typing <code>hatch test --help</code>.</p> <p>Any additional arguments in the <code>test</code> command are directly passed on to pytest. See the pytest documentation for what additional arguments are available.</p>"},{"location":"about/contributing/#linting-and-formatting","title":"Linting and Formatting","text":"Command Description <code>hatch fmt</code> Run all linters and formatters <code>hatch fmt --check</code> Run all linters and formatters, but do not save fixes to the disk <code>hatch fmt --linter</code> Run only linters <code>hatch fmt --formatter</code> Run only formatters Configure your IDE for linting <p>This repository uses <code>hatch fmt</code> for linting and formatting, which is a modestly customized version of <code>ruff</code>.</p> <p>You can install <code>ruff</code> as a plugin to your preferred code editor to create a similar environment.</p>"},{"location":"about/contributing/#documentation","title":"Documentation","text":"Command Description <code>hatch run docs:serve</code> Start the <code>mkdocs</code> server to view documentation locally <code>hatch run docs:build</code> Build the documentation <code>hatch run docs:linkcheck</code> Check for broken links in the documentation"},{"location":"about/contributing/#environment-management","title":"Environment Management","text":"Command Description <code>hatch build --clean</code> Build the package from source <code>hatch env prune</code> Delete all virtual environments created by <code>hatch</code> <code>hatch python install 3.12</code> Install a specific Python version to your system Check out Hatch for all available commands! <p>This documentation only covers commonly used commands.</p> <p>You can type <code>hatch --help</code> to see all available commands.</p>"},{"location":"about/contributing/#vscode-debugging","title":"VSCODE Debugging","text":"<p>Launch scripts are available to allow all/any of the pytest tests to be  debugged. In order to launch the tests in the same environment  as hatch in the VSCODE/Debugger the PATH entry in the local .env is  used. </p> <p>You must run the hatch test command once, before running the VSCODE  debugger. This will ensure the .env PATH entry is set correctly.</p>"},{"location":"about/license/","title":"License","text":""},{"location":"about/license/#the-mit-license-mit","title":"The MIT License (MIT)","text":""},{"location":"about/license/#copyright-c-2024-steve-jones","title":"Copyright (c) 2024 Steve Jones","text":"<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"components/clipboard/","title":"Clipboard","text":"<p>The <code>CopyToClipboard</code> component allows users to copy text to the Browser clipboard. </p> <p>The component attaches a copy-to-clipboard action to the button of given 'button_id'.  When clicked the given text to the browser's clipboard.</p> clipboard.py <pre><code>import lorem\nfrom reactpy import component, html\n\nfrom reactpy_utils import CopyToClipboard\n\nBUTTON_ID = \"test-copy-btn\"\nTEXT = lorem.paragraph()\n\n\n@component\ndef App():\n    return html._(html.button({\"id\": BUTTON_ID}, \"Copy to Clipboard\"), CopyToClipboard(button_id=BUTTON_ID, text=TEXT))\n</code></pre>"},{"location":"components/document_title/","title":"Document Title","text":"<p>The <code>DocumentTitle</code> component sets the browser tab to the given string. </p> <p>In multi-page applications in each page can have it's own <code>DocumentTitle</code> component.</p> document_title.py <pre><code>from reactpy import component\n\nfrom reactpy_utils import DocumentTitle\n\n\n@component\ndef App():\n    return DocumentTitle(\"My Website\")\n</code></pre>"},{"location":"components/dynamic_context/","title":"Dynamic Context","text":"<p>The dynamic context model is an enhanced version of the ReactPy use-context hook. In addition to providing application state that can be easily accessed by child components the  dynamic context model allows the child components to change the state. Any changes made by a child component will update the context and will force the parent component and children to be re-rendered.</p> <p>A typical usage would be where a deeply embedded child component, a drop-down element in a complex nested navigation component say, needs to update some element in  the main application state. </p> dynamic_context.pyapp_context.py <pre><code>from reactpy import component, event, html, use_context, use_state\n\nfrom reactpy_utils.types import EventArgs\n\nfrom .app_context import AppContext, AppState\n\n\n@component\ndef App():\n    app_state, set_app_state = use_state(AppState())\nreturn AppContext(\nNavBar(),\n        Content(),\nvalue=(app_state, set_app_state),\n)\n\n\n@component\ndef Content():\napp_state, _ = use_context(AppContext)\nreturn html.div(\n        html.h2(f\"dark_mode={app_state.dark_mode}\"),\n    )\n\n\n@component\ndef NavBar():\n    return html.div(DarkModeButton())\n\n\n@component\ndef DarkModeButton():\napp_state, set_app_state = use_context(AppContext)\n@event\n    def on_click(_evt: EventArgs):\nset_app_state(app_state.update(dark_mode=not app_state.dark_mode))\nreturn html.button({\"on_click\": on_click}, \"Toggle Dark Mode\")\n</code></pre> <pre><code>from reactpy_utils import DynamicContextModel, create_dynamic_context\n\n\nclass AppState(DynamicContextModel):\n    dark_mode: bool = True\n\n\nAppContext = create_dynamic_context(AppState)\n</code></pre>"},{"location":"components/dynamic_context/#custom-context-models","title":"Custom Context Models","text":"<p>By default context models are defined by sub-classing DynamicContextModel which itself is a subclass of the Pydantic, BaseModel. As an alternative you can also subclass the none-pydantic CustomDynamicContextModel or implement the protocol interface IDynamicContextModel</p> <pre><code>from reactpy_utils import CustomDynamicContextModel, create_dynamic_context\n\nclass CurrentUserState(CustomDynamicContextModel):\n\n    def __init__(self, user_name: str, password:str, dark_mode: bool = True):\n        super().__init__()\n        self.user_name = user_name\n        self.password = password\n        self.dark_mode = dark_mode\n\n\nAppContext = create_dynamic_context(CurrentUserState)\n</code></pre>"},{"location":"components/local_storage/","title":"Local Storage","text":"<p>A browser local storage provider. Synchronizes the given context model with the browser local storage. The provider blocks the rendering of any child components until the the model has been  synchronized with the browser.</p> <p>The context model is stored in the browser's local storage as unencrypted stringified json (see encryption example below).</p> local_storage.pyapp_context.py <pre><code>from reactpy import component, event, html, use_context, use_state\n\nfrom reactpy_utils import LocalStorageProvider\nfrom reactpy_utils.types import EventArgs\n\nfrom .app_context import AppContext, AppState\n\n\n@component\ndef App():\n    app_state, set_app_state = use_state(AppState())\n\n    return AppContext(\n        LocalStorageProvider(ExamplePage(), ctx=AppContext, storage_key=\"local-storage-example\"),\n        value=(app_state, set_app_state),\n    )\n\n\n@component\ndef ExamplePage():\n    app_state, set_app_state = use_context(AppContext)\n\n    @event\n    def on_click(_evt: EventArgs):\n        set_app_state(app_state.update(dark_mode=not app_state.dark_mode))\n\n    return html.div(\n        html.h2({\"id\": \"h2\"}, f\"dark_mode={app_state.dark_mode}\"),\n        html.button({\"id\": \"toggle_btn\", \"on_click\": on_click}, \"Toggle Dark Mode\"),\n    )\n</code></pre> <pre><code>from reactpy_utils import DynamicContextModel, create_dynamic_context\n\n\nclass AppState(DynamicContextModel):\n    dark_mode: bool = True\n\n\nAppContext = create_dynamic_context(AppState)\n</code></pre>"},{"location":"components/local_storage/#encrypting-local-storage-data","title":"Encrypting Local Storage Data","text":"<p>The data stored in the browser can easily be encrypted by sub-classing DynamicContextModel. The  following example uses Fernet symmetric encryption. </p> <p>Use Fernet.generate_key() to create keys. The key remains on the server, only encrypted  data is sent to the browser.</p> encrypted_app_context.py <pre><code>import base64\nimport json\n\nfrom cryptography.fernet import Fernet\nfrom typing_extensions import Self\n\nfrom reactpy_utils import DynamicContextModel, create_dynamic_context\n\n# Use Fernet.generate_key() to create keys. The key remains on\n# the server, only encrypted data is sent to the browser.\n\nfernet = Fernet(b\"3qgHqyfztBTIDpPc1AFYt9vPXQ1Ni5lF4vwfhaMzWBs=\")\n\n\ndef decode(data: str) -&gt; dict:\n\"\"\"Decode encrypted json data to a json object\"\"\"\n    encMessage = base64.b64decode(data)\n    plane = fernet.decrypt(encMessage).decode()\n    return json.loads(plane)\n\n\ndef encode(plain_text: str) -&gt; str:\n\"\"\"Encode the plain_text stringified json object to an encrypted, base64, stringified json object\"\"\"\n    encMessage = fernet.encrypt(plain_text.encode())\n    encMessage64 = base64.b64encode(encMessage).decode(\"utf-8\")\n    return json.dumps({\"data\": encMessage64})\n\n\nclass EncryptedDynamicContextBase(DynamicContextModel):\n\"\"\"Fernet encryption base class. The fields of all models derived from this\n    class will be stored in an a encrypted form in the browser\"\"\"\n\n    def update(self: Self, **kwargs) -&gt; Self:\n        kwargs = decode(**kwargs)\n        return super().update(**kwargs)\n\n    def dumps(self, sort_keys=True) -&gt; str:\n        plane_text = super().dumps(sort_keys=sort_keys)\n        return encode(plane_text)\n\n\n# Example usage of defining an encrypted user model &amp; context\n\n\nclass UserState(EncryptedDynamicContextBase):\n    user_name: str\n    password: str\n\n\nUserContext = create_dynamic_context(UserState)\n</code></pre> <p>The same pattern can be applied to any desired encryption method.</p>"},{"location":"components/script/","title":"Script Templates","text":"<p>The Script component wraps the RectPy html.script() to provide support for variable  substitution and minification.</p> <p>Script example:</p> <pre><code>from reactpy_utils import Script, IDynamicContextModel\n\ndef save_state(storage_id:str, state: IDynamicContextModel):\n    ctx = {\"local_storage_id\": storage_id, \"values\": state.dumps()}\n    return Script(LOCAL_STORAGE_WRITE_JS, ctx, minify=True)\n\nLOCAL_STORAGE_WRITE_JS = \"\"\"\n    () =&gt; {\n        // Write values to localStorage\n\n        try {\n            console.log('write {local_storage_id} values: {values}');\n            localStorage.setItem('{local_storage_id}', '{values}');\n\n        } catch (error) {\n            // Handle potential localStorage errors (e.g., storage quota exceeded, private browsing)\n            console.error('Error writing to localStorage({local_storage_id}):', error);\n        }\n    }\n\"\"\"\n</code></pre>"},{"location":"components/script/#minification","title":"Minification","text":"<p>The minimal minification process will, if enabled, strip white space, comments and  console.log() messages from the source. The minification process is pretty dumb. Semicolons at the end of statements are important. If your script fails when minified check first for missing semicolons.</p>"},{"location":"components/script/#script-life-cycle","title":"Script Life Cycle","text":"<p>Scripts are injected and run when the associated page is loaded. If the script hooks into event  listeners or other state-related aspects of the DOM then these must be un-hooked when the page is destroyed. This can be achieved by returning a page-unload function reference when the script is first loaded. To do this define a script with the following pattern:</p> <pre><code>SCRIPT_WITH_CLEAN_UP_JS = \"\"\"\n    () =&gt; {\n\n        // Code executed when page is loaded\n\n        return () =&gt; {\n            // Code executed when page is unloaded\n        }\n\n    }\n\"\"\"\n</code></pre>"},{"location":"components/script/#debugging-scripts","title":"Debugging Scripts","text":"<p>Scripts can be debugged using the Browser debugger (or directly in VSCODE). To locate the code add a <code>console.log(\"My Code Loaded\")</code> message to the script. This will appear in the debugger console window. Clicking on it will take you directly to your code. Add brake points as required.</p>"},{"location":"reference/class_component/","title":"@class_component","text":"<p>While the ReactPy decorator @component is used extensively for defining a  new components there are occasions when it is limiting. The class_component  is a simple decorator that allows any python class to behave as a component. </p> <p>An example of its use would be a Table class which encapsulates table data together with methods that return several views: pagination,  search, filter, etc. A table instance, once created, can be used in different parts of the UI. The search view in the header section, the pagination view  above or below the table body and a summary view on the  dashboard for instance. Each of these views would be implemented in the methods of the  Table class.</p> <p>A comprehensive implementation of a table base class containing the carefully  honed logic for pagination, search &amp; filtering, say, could then be subclassed to provide various UI implementations or override aspects of the table logic.</p> class_component.py <pre><code>import copy\nfrom typing import Any, Generic, TypeVar\n\nfrom pydantic import BaseModel\nfrom reactpy import component, event, html, run, use_state\nfrom reactpy.core.types import VdomDict\n\nfrom reactpy_utils import class_component\nfrom reactpy_utils.types import EventArgs\n\nTData = TypeVar(\"TData\", bound=Any)\n\n\nclass TableState(BaseModel, Generic[TData]):\n    row_start: int = 0\n    rows: list[TData] = []\n\n\n@class_component\nclass BasicTable(Generic[TData]):\n    def __init__(self, rows: list[TData]):\n        super().__init__()\n        self._table, self._set_table = use_state(TableState(rows=rows))\n\n    @property\n    def rows(self) -&gt; list[TData]:\n        return self._table.rows\n\n    @property\n    def row_start(self) -&gt; int:\n        return self._table.row_start\n\n    def page_next(self) -&gt; None:\n        def update(table: TableState) -&gt; TableState:\n            table = copy.copy(table)\n            table.row_start = min(table.row_start + 10, len(table.rows))\n            return table\n\n        self._set_table(update)\n\n    @component\n    def TableHeader(self):\n        return html.header(html.th(\"User ID\"))\n\n    @component\n    def TableBody(self):\n        table = self._table\n        first = table.row_start\n        last = min(first + 10, len(table.rows))\n        rows = [html.tr(html.td(row)) for row in table.rows[first:last]]\n        return html.tbody(*rows)\n\n    def render(self) -&gt; VdomDict:\n        return html.table(self.TableHeader(), self.TableBody())\n\n\n@component\ndef App():\n    @component\n    def PaginatorUI(table: BasicTable):\n        @event\n        def on_click(_evt: EventArgs):\n            table.page_next()\n\n        return html.button({\"id\": \"next-page\", \"on_click\": on_click}, \"Next Page\")\n\n    @component\n    def PageHeader(user_table: BasicTable):\n        return html.div(\n            html.h2(f\"Page Header: table start = {user_table.row_start}\"),\n            PaginatorUI(user_table),\n        )\n\n    @component\n    def PageContent(user_table: BasicTable):\n        return html._(html.h2(\"Table Content\"), user_table)\n\n    @component\n    def PageFooter(user_table: BasicTable):\n        return html.h2(f\"Footer: table size = {len(user_table.rows)}\")\n\n    table = BasicTable(rows=[f\"user-{i}\" for i in range(50)])\n    return html.div(PageHeader(table), PageContent(table), PageFooter(table))\n\n\n# python -m docs.examples.python.class_component\n\nif __name__ == \"__main__\":\n    run(App)\n</code></pre>"},{"location":"reference/other/","title":"Other","text":"<p>An assortment of helper methods.</p>"},{"location":"reference/other/#props","title":"Props","text":"<p>Often it's desirable to define fully typed the arguments on component method. Some of the arguments may be specific to the method logic while other arguments are to be  aggregated into an attribute dictionary and passed to a child element. The props() method allows the method arguments to be sliced and filtered to achieve this.</p>"},{"location":"reference/other/#reactpy_utils.props.props","title":"<code>reactpy_utils.props.props(include=None, exclude=None)</code>","text":"<p>Convert the caller functions arguments into a props dict. Include the arguments named in the include string. Exclude those named in the exclude string. If nether include or exclude are defined all the arguments are added to the props dict.</p> <p>Parameters:</p> Name Type Description Default <code>include</code> <code>str</code> <p>Arguments to include in the returned props. Defaults to None.</p> <code>None</code> <code>exclude</code> <code>str</code> <p>Arguments to exclude from the returned props. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The props</p> <p>Example: <pre><code>@component\ndef Input(\n    label: str | None = None,\n    id: str | None = None,\n    name: str | None = None,\n    placeholder: str | None = None,\n    value: str | None = None,\n):\n    _input_props = props(include=\"id, name, placeholder, value\")\n    return html.div(html.h2(label), html.input(_input_props))\n</code></pre></p>"},{"location":"reference/other/#immutable-counter","title":"Immutable Counter","text":""},{"location":"reference/other/#reactpy_utils.static_counter.ID","title":"<code>reactpy_utils.static_counter.ID()</code>","text":"<p>An immutable counter. Returns  0, 1, 2 ... on each successive call</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>count 0, 1, 2 ...</p>"},{"location":"reference/other/#render-child-components-when-test-is-true","title":"Render Child Components When test is True","text":"<p>Render children when test is True</p> <p>Parameters:</p> Name Type Description Default <code>test</code> <code>bool</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>Component</code> <code>VdomChild</code> <p>Return a fragment containing the child components</p> <p>Returns:</p> Name Type Description <code>Component</code> <code>VdomChild</code> <p>Return a fragment containing the child components</p> <p>Example <pre><code>@component\ndef App():\n    return AppContext(When(app_state.is_valid, MainPage()))\n</code></pre></p>"},{"location":"reference/other/#unique_sequence","title":"Unique_sequence","text":""},{"location":"reference/other/#reactpy_utils.UID","title":"<code>reactpy_utils.UID(prefix='')</code>","text":"<p>Generator method that returns unique IDs prepended with the given prefix</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The ID prefix Defaults to \"\".</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique ID, eg (user-da80b519)</p> <p>Example: <pre><code>user_ids = [UID(prefix=\"user\") for i in range(1000)]\n</code></pre></p>"},{"location":"reference/params/","title":"URL params","text":"<p>Custom versions of reactpy_router use_search_params that return parameters as a  Pydantic data class.</p>"},{"location":"reference/params/#use_search_params","title":"use_search_params","text":"<p>The following search params can be converted into a fully typed Pydantic model  as follows.</p> <pre><code>?hello=world&amp;thing=1&amp;thing=2\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom reactpy import component, html\n\nfrom reactpy_utils import use_search_params\n\nclass MyParams(BaseModel):\n    hello: str | None = None\n    thing: list[int] | None = None\n\n\n@component\ndef App():\n    params = use_search_params(MyParams)\n\n    return html.h2(params.hello)\n</code></pre>"},{"location":"reference/params/#use_params","title":"use_params","text":"<p>The following params can be converted into a fully typed Pydantic model  as follows.</p>"},{"location":"reference/types/","title":"Types","text":"<p>A collection of type definition helpers.</p>"},{"location":"reference/types/#reactpy_utils.types.Action","title":"<code>reactpy_utils.types.Action = Callable[..., None]</code>","text":"<p>A callable type that returns None</p>"},{"location":"reference/types/#reactpy_utils.types.EventArgs","title":"<code>reactpy_utils.types.EventArgs = dict[str, Any]</code>","text":"<p>Event handler args type</p>"},{"location":"reference/types/#reactpy_utils.types.EventHandler","title":"<code>reactpy_utils.types.EventHandler = Callable[[EventArgs], None]</code>","text":"<p>ReactPy Event handler arguments type</p>"},{"location":"reference/types/#reactpy_utils.types.NO_PROPS","title":"<code>reactpy_utils.types.NO_PROPS()</code>","text":"<p>A function that returns an empty props dict</p>"}]}